// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.0
// source: RoboSdk.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoboSdkClient is the client API for RoboSdk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoboSdkClient interface {
	RI_SDK_InitSDK(ctx context.Context, in *RI_SDK_InitSDKParams, opts ...grpc.CallOption) (*RI_SDK_InitSDKReturn, error)
	RI_SDK_CreateBasic(ctx context.Context, in *RI_SDK_CreateBasicParams, opts ...grpc.CallOption) (*RI_SDK_CreateBasicReturn, error)
	RI_SDK_DestroyComponent(ctx context.Context, in *RI_SDK_DestroyComponentParams, opts ...grpc.CallOption) (*RI_SDK_DestroyComponentReturn, error)
	RI_SDK_DestroySDK(ctx context.Context, in *RI_SDK_DestroySDKParams, opts ...grpc.CallOption) (*RI_SDK_DestroySDKReturn, error)
	RI_SDK_CreateGroupComponent(ctx context.Context, in *RI_SDK_CreateGroupComponentParams, opts ...grpc.CallOption) (*RI_SDK_CreateGroupComponentReturn, error)
	RI_SDK_CreateDeviceComponent(ctx context.Context, in *RI_SDK_CreateDeviceComponentParams, opts ...grpc.CallOption) (*RI_SDK_CreateDeviceComponentReturn, error)
	RI_SDK_CreateModelComponent(ctx context.Context, in *RI_SDK_CreateModelComponentParams, opts ...grpc.CallOption) (*RI_SDK_CreateModelComponentReturn, error)
	RI_SDK_LinkPWMToController(ctx context.Context, in *RI_SDK_LinkPWMToControllerParams, opts ...grpc.CallOption) (*RI_SDK_LinkPWMToControllerReturn, error)
	RI_SDK_LinkServodriveToController(ctx context.Context, in *RI_SDK_LinkServodriveToControllerParams, opts ...grpc.CallOption) (*RI_SDK_LinkServodriveToControllerReturn, error)
	RI_SDK_LinkLedToController(ctx context.Context, in *RI_SDK_LinkLedToControllerParams, opts ...grpc.CallOption) (*RI_SDK_LinkLedToControllerReturn, error)
	RI_SDK_Executor_Extend(ctx context.Context, in *RI_SDK_Executor_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Executor_ExtendReturn, error)
	RI_SDK_Executor_State(ctx context.Context, in *RI_SDK_Executor_StateParams, opts ...grpc.CallOption) (*RI_SDK_Executor_StateReturn, error)
	RI_SDK_Connector_Extend(ctx context.Context, in *RI_SDK_Connector_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Connector_ExtendReturn, error)
	RI_SDK_Connector_I2C_Open(ctx context.Context, in *RI_SDK_Connector_I2C_OpenParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_OpenReturn, error)
	RI_SDK_Connector_I2C_Extend(ctx context.Context, in *RI_SDK_Connector_I2C_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_ExtendReturn, error)
	RI_SDK_Connector_I2C_State(ctx context.Context, in *RI_SDK_Connector_I2C_StateParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_StateReturn, error)
	RI_SDK_Connector_I2C_CloseAll(ctx context.Context, in *RI_SDK_Connector_I2C_CloseAllParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_CloseAllReturn, error)
	RI_SDK_Connector_I2C_Close(ctx context.Context, in *RI_SDK_Connector_I2C_CloseParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_CloseReturn, error)
	RI_SDK_Connector_I2C_WriteBytes(ctx context.Context, in *RI_SDK_Connector_I2C_WriteBytesParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_WriteBytesReturn, error)
	RI_SDK_Connector_I2C_ReadBytes(ctx context.Context, in *RI_SDK_Connector_I2C_ReadBytesParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_ReadBytesReturn, error)
	RI_SDK_Connector_I2C_WriteByte(ctx context.Context, in *RI_SDK_Connector_I2C_WriteByteParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_WriteByteReturn, error)
	RI_SDK_Connector_I2C_ReadByte(ctx context.Context, in *RI_SDK_Connector_I2C_ReadByteParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_ReadByteReturn, error)
	RI_SDK_Sigmod_PWM_GetResolution(ctx context.Context, in *RI_SDK_Sigmod_PWM_GetResolutionParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_GetResolutioneReturn, error)
	RI_SDK_Sigmod_PWM_GetFreq(ctx context.Context, in *RI_SDK_Sigmod_PWM_GetFreqParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_GetFreqReturn, error)
	RI_SDK_Sigmod_PWM_SetFreq(ctx context.Context, in *RI_SDK_Sigmod_PWM_SetFreqParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_SetFreqReturn, error)
	RI_SDK_Sigmod_PWM_WriteRegBytes(ctx context.Context, in *RI_SDK_Sigmod_PWM_WriteRegBytesParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_WriteRegBytesReturn, error)
	RI_SDK_Sigmod_PWM_ReadRegBytes(ctx context.Context, in *RI_SDK_Sigmod_PWM_ReadRegBytesParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ReadRegBytesReturn, error)
	RI_SDK_Sigmod_PWM_WriteByte(ctx context.Context, in *RI_SDK_Sigmod_PWM_WriteRegByteParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_WriteRegByteReturn, error)
	RI_SDK_Sigmod_PWM_ReadByte(ctx context.Context, in *RI_SDK_Sigmod_PWM_ReadRegByteParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ReadRegByteReturn, error)
	RI_SDK_Sigmod_PWM_Extend(ctx context.Context, in *RI_SDK_Sigmod_PWM_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ExtendReturn, error)
	RI_SDK_Sigmod_PWM_GetPortFreq(ctx context.Context, in *RI_SDK_Sigmod_PWM_GetPortFreqParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_GetPortFreqReturn, error)
	RI_SDK_Sigmod_PWM_SetPortFreq(ctx context.Context, in *RI_SDK_Sigmod_PWM_SetPortFreqParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_SetPortFreqReturn, error)
	RI_SDK_Sigmod_PWM_ResetAll(ctx context.Context, in *RI_SDK_Sigmod_PWM_ResetAllParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ResetAllReturn, error)
	RI_SDK_Sigmod_PWM_ResetPort(ctx context.Context, in *RI_SDK_Sigmod_PWM_ResetPortParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ResetPortReturn, error)
	RI_SDK_Sigmod_PWM_SetPortDutyCycle(ctx context.Context, in *RI_SDK_Sigmod_PWM_SetPortDutyCycleParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_SetPortDutyCycleReturn, error)
	RI_SDK_Sigmod_PWM_GetPortDutyCycle(ctx context.Context, in *RI_SDK_Sigmod_PWM_GetPortDutyCycleParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_GetPortDutyCycleReturn, error)
	RI_SDK_Sigmod_PWM_Close(ctx context.Context, in *RI_SDK_Sigmod_PWM_CloseParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_CloseReturn, error)
	RI_SDK_Exec_ServoDrive_Extend(ctx context.Context, in *RI_SDK_Exec_ServoDrive_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_ExtendReturn, error)
	RI_SDK_Exec_ServoDrive_CustomDeviceInit(ctx context.Context, in *RI_SDK_Exec_ServoDrive_CustomDeviceInitParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_CustomDeviceInitReturn, error)
	RI_SDK_Exec_ServoDrive_TurnByDutyCycle(ctx context.Context, in *RI_SDK_Exec_ServoDrive_TurnByDutyCycleParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_TurnByDutyCycleReturn, error)
	RI_SDK_Exec_ServoDrive_TurnByPulse(ctx context.Context, in *RI_SDK_Exec_ServoDrive_TurnByPulseParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_TurnByPulseReturn, error)
	RI_SDK_Exec_ServoDrive_GetCurrentAngle(ctx context.Context, in *RI_SDK_Exec_ServoDrive_GetCurrentAngleParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_GetCurrentAngleReturn, error)
	RI_SDK_Exec_ServoDrive_GetState(ctx context.Context, in *RI_SDK_Exec_ServoDrive_GetStateParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_GetStateReturn, error)
	RI_SDK_Exec_ServoDrive_MinStepRotate(ctx context.Context, in *RI_SDK_Exec_ServoDrive_MinStepRotateParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_MinStepRotateReturn, error)
	RI_SDK_Exec_ServoDrive_Turn(ctx context.Context, in *RI_SDK_Exec_ServoDrive_TurnParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_TurnReturn, error)
	RI_SDK_Exec_ServoDrive_Stop(ctx context.Context, in *RI_SDK_Exec_ServoDrive_StopParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_StopReturn, error)
	RI_SDK_Exec_ServoDrive_Rotate(ctx context.Context, in *RI_SDK_Exec_ServoDrive_RotateParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_RotateReturn, error)
	RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed(ctx context.Context, in *RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedReturn, error)
	RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed(ctx context.Context, in *RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedReturn, error)
	RI_SDK_Exec_RGB_LED_Extend(ctx context.Context, in *RI_SDK_Exec_RGB_LED_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_ExtendReturn, error)
	RI_SDK_Exec_RGB_LED_SinglePulse(ctx context.Context, in *RI_SDK_Exec_RGB_LED_SinglePulseParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_SinglePulseReturn, error)
	RI_SDK_Exec_RGB_LED_Stop(ctx context.Context, in *RI_SDK_Exec_RGB_LED_StopParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_StopReturn, error)
	RI_SDK_Exec_RGB_LED_GetState(ctx context.Context, in *RI_SDK_Exec_RGB_LED_GetStateParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_GetStateReturn, error)
	RI_SDK_Exec_RGB_LED_GetColor(ctx context.Context, in *RI_SDK_Exec_RGB_LED_GetColorParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_GetColorReturn, error)
	RI_SDK_Exec_RGB_LED_FlashingWithFrequency(ctx context.Context, in *RI_SDK_Exec_RGB_LED_FlashingWithFrequencyParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_FlashingWithFrequencyReturn, error)
	RI_SDK_Exec_RGB_LED_FlashingWithPause(ctx context.Context, in *RI_SDK_Exec_RGB_LED_FlashingWithPauseParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_FlashingWithPauseReturn, error)
	RI_SDK_Exec_RGB_LED_Flicker(ctx context.Context, in *RI_SDK_Exec_RGB_LED_FlickerParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_FlickerReturn, error)
}

type roboSdkClient struct {
	cc grpc.ClientConnInterface
}

func NewRoboSdkClient(cc grpc.ClientConnInterface) RoboSdkClient {
	return &roboSdkClient{cc}
}

func (c *roboSdkClient) RI_SDK_InitSDK(ctx context.Context, in *RI_SDK_InitSDKParams, opts ...grpc.CallOption) (*RI_SDK_InitSDKReturn, error) {
	out := new(RI_SDK_InitSDKReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_InitSDK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_CreateBasic(ctx context.Context, in *RI_SDK_CreateBasicParams, opts ...grpc.CallOption) (*RI_SDK_CreateBasicReturn, error) {
	out := new(RI_SDK_CreateBasicReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_CreateBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_DestroyComponent(ctx context.Context, in *RI_SDK_DestroyComponentParams, opts ...grpc.CallOption) (*RI_SDK_DestroyComponentReturn, error) {
	out := new(RI_SDK_DestroyComponentReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_DestroyComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_DestroySDK(ctx context.Context, in *RI_SDK_DestroySDKParams, opts ...grpc.CallOption) (*RI_SDK_DestroySDKReturn, error) {
	out := new(RI_SDK_DestroySDKReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_DestroySDK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_CreateGroupComponent(ctx context.Context, in *RI_SDK_CreateGroupComponentParams, opts ...grpc.CallOption) (*RI_SDK_CreateGroupComponentReturn, error) {
	out := new(RI_SDK_CreateGroupComponentReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_CreateGroupComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_CreateDeviceComponent(ctx context.Context, in *RI_SDK_CreateDeviceComponentParams, opts ...grpc.CallOption) (*RI_SDK_CreateDeviceComponentReturn, error) {
	out := new(RI_SDK_CreateDeviceComponentReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_CreateDeviceComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_CreateModelComponent(ctx context.Context, in *RI_SDK_CreateModelComponentParams, opts ...grpc.CallOption) (*RI_SDK_CreateModelComponentReturn, error) {
	out := new(RI_SDK_CreateModelComponentReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_CreateModelComponent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_LinkPWMToController(ctx context.Context, in *RI_SDK_LinkPWMToControllerParams, opts ...grpc.CallOption) (*RI_SDK_LinkPWMToControllerReturn, error) {
	out := new(RI_SDK_LinkPWMToControllerReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_LinkPWMToController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_LinkServodriveToController(ctx context.Context, in *RI_SDK_LinkServodriveToControllerParams, opts ...grpc.CallOption) (*RI_SDK_LinkServodriveToControllerReturn, error) {
	out := new(RI_SDK_LinkServodriveToControllerReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_LinkServodriveToController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_LinkLedToController(ctx context.Context, in *RI_SDK_LinkLedToControllerParams, opts ...grpc.CallOption) (*RI_SDK_LinkLedToControllerReturn, error) {
	out := new(RI_SDK_LinkLedToControllerReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_LinkLedToController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Executor_Extend(ctx context.Context, in *RI_SDK_Executor_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Executor_ExtendReturn, error) {
	out := new(RI_SDK_Executor_ExtendReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Executor_Extend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Executor_State(ctx context.Context, in *RI_SDK_Executor_StateParams, opts ...grpc.CallOption) (*RI_SDK_Executor_StateReturn, error) {
	out := new(RI_SDK_Executor_StateReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Executor_State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_Extend(ctx context.Context, in *RI_SDK_Connector_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Connector_ExtendReturn, error) {
	out := new(RI_SDK_Connector_ExtendReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_Extend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_Open(ctx context.Context, in *RI_SDK_Connector_I2C_OpenParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_OpenReturn, error) {
	out := new(RI_SDK_Connector_I2C_OpenReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_Extend(ctx context.Context, in *RI_SDK_Connector_I2C_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_ExtendReturn, error) {
	out := new(RI_SDK_Connector_I2C_ExtendReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_Extend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_State(ctx context.Context, in *RI_SDK_Connector_I2C_StateParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_StateReturn, error) {
	out := new(RI_SDK_Connector_I2C_StateReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_CloseAll(ctx context.Context, in *RI_SDK_Connector_I2C_CloseAllParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_CloseAllReturn, error) {
	out := new(RI_SDK_Connector_I2C_CloseAllReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_CloseAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_Close(ctx context.Context, in *RI_SDK_Connector_I2C_CloseParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_CloseReturn, error) {
	out := new(RI_SDK_Connector_I2C_CloseReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_WriteBytes(ctx context.Context, in *RI_SDK_Connector_I2C_WriteBytesParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_WriteBytesReturn, error) {
	out := new(RI_SDK_Connector_I2C_WriteBytesReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_WriteBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_ReadBytes(ctx context.Context, in *RI_SDK_Connector_I2C_ReadBytesParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_ReadBytesReturn, error) {
	out := new(RI_SDK_Connector_I2C_ReadBytesReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_ReadBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_WriteByte(ctx context.Context, in *RI_SDK_Connector_I2C_WriteByteParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_WriteByteReturn, error) {
	out := new(RI_SDK_Connector_I2C_WriteByteReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_WriteByte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Connector_I2C_ReadByte(ctx context.Context, in *RI_SDK_Connector_I2C_ReadByteParams, opts ...grpc.CallOption) (*RI_SDK_Connector_I2C_ReadByteReturn, error) {
	out := new(RI_SDK_Connector_I2C_ReadByteReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Connector_I2C_ReadByte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_GetResolution(ctx context.Context, in *RI_SDK_Sigmod_PWM_GetResolutionParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_GetResolutioneReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_GetResolutioneReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_GetResolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_GetFreq(ctx context.Context, in *RI_SDK_Sigmod_PWM_GetFreqParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_GetFreqReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_GetFreqReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_GetFreq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_SetFreq(ctx context.Context, in *RI_SDK_Sigmod_PWM_SetFreqParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_SetFreqReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_SetFreqReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_SetFreq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_WriteRegBytes(ctx context.Context, in *RI_SDK_Sigmod_PWM_WriteRegBytesParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_WriteRegBytesReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_WriteRegBytesReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_WriteRegBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_ReadRegBytes(ctx context.Context, in *RI_SDK_Sigmod_PWM_ReadRegBytesParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ReadRegBytesReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_ReadRegBytesReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_ReadRegBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_WriteByte(ctx context.Context, in *RI_SDK_Sigmod_PWM_WriteRegByteParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_WriteRegByteReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_WriteRegByteReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_WriteByte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_ReadByte(ctx context.Context, in *RI_SDK_Sigmod_PWM_ReadRegByteParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ReadRegByteReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_ReadRegByteReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_ReadByte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_Extend(ctx context.Context, in *RI_SDK_Sigmod_PWM_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ExtendReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_ExtendReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_Extend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_GetPortFreq(ctx context.Context, in *RI_SDK_Sigmod_PWM_GetPortFreqParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_GetPortFreqReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_GetPortFreqReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_GetPortFreq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_SetPortFreq(ctx context.Context, in *RI_SDK_Sigmod_PWM_SetPortFreqParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_SetPortFreqReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_SetPortFreqReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_SetPortFreq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_ResetAll(ctx context.Context, in *RI_SDK_Sigmod_PWM_ResetAllParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ResetAllReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_ResetAllReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_ResetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_ResetPort(ctx context.Context, in *RI_SDK_Sigmod_PWM_ResetPortParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_ResetPortReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_ResetPortReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_ResetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_SetPortDutyCycle(ctx context.Context, in *RI_SDK_Sigmod_PWM_SetPortDutyCycleParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_SetPortDutyCycleReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_SetPortDutyCycleReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_SetPortDutyCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_GetPortDutyCycle(ctx context.Context, in *RI_SDK_Sigmod_PWM_GetPortDutyCycleParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_GetPortDutyCycleReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_GetPortDutyCycleReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_GetPortDutyCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Sigmod_PWM_Close(ctx context.Context, in *RI_SDK_Sigmod_PWM_CloseParams, opts ...grpc.CallOption) (*RI_SDK_Sigmod_PWM_CloseReturn, error) {
	out := new(RI_SDK_Sigmod_PWM_CloseReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Sigmod_PWM_Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_Extend(ctx context.Context, in *RI_SDK_Exec_ServoDrive_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_ExtendReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_ExtendReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_Extend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_CustomDeviceInit(ctx context.Context, in *RI_SDK_Exec_ServoDrive_CustomDeviceInitParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_CustomDeviceInitReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_CustomDeviceInitReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_CustomDeviceInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_TurnByDutyCycle(ctx context.Context, in *RI_SDK_Exec_ServoDrive_TurnByDutyCycleParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_TurnByDutyCycleReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_TurnByDutyCycleReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_TurnByDutyCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_TurnByPulse(ctx context.Context, in *RI_SDK_Exec_ServoDrive_TurnByPulseParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_TurnByPulseReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_TurnByPulseReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_TurnByPulse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_GetCurrentAngle(ctx context.Context, in *RI_SDK_Exec_ServoDrive_GetCurrentAngleParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_GetCurrentAngleReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_GetCurrentAngleReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_GetCurrentAngle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_GetState(ctx context.Context, in *RI_SDK_Exec_ServoDrive_GetStateParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_GetStateReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_GetStateReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_MinStepRotate(ctx context.Context, in *RI_SDK_Exec_ServoDrive_MinStepRotateParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_MinStepRotateReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_MinStepRotateReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_MinStepRotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_Turn(ctx context.Context, in *RI_SDK_Exec_ServoDrive_TurnParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_TurnReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_TurnReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_Turn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_Stop(ctx context.Context, in *RI_SDK_Exec_ServoDrive_StopParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_StopReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_StopReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_Rotate(ctx context.Context, in *RI_SDK_Exec_ServoDrive_RotateParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_RotateReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_RotateReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_Rotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed(ctx context.Context, in *RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed(ctx context.Context, in *RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedParams, opts ...grpc.CallOption) (*RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedReturn, error) {
	out := new(RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_RGB_LED_Extend(ctx context.Context, in *RI_SDK_Exec_RGB_LED_ExtendParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_ExtendReturn, error) {
	out := new(RI_SDK_Exec_RGB_LED_ExtendReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_Extend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_RGB_LED_SinglePulse(ctx context.Context, in *RI_SDK_Exec_RGB_LED_SinglePulseParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_SinglePulseReturn, error) {
	out := new(RI_SDK_Exec_RGB_LED_SinglePulseReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_SinglePulse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_RGB_LED_Stop(ctx context.Context, in *RI_SDK_Exec_RGB_LED_StopParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_StopReturn, error) {
	out := new(RI_SDK_Exec_RGB_LED_StopReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_RGB_LED_GetState(ctx context.Context, in *RI_SDK_Exec_RGB_LED_GetStateParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_GetStateReturn, error) {
	out := new(RI_SDK_Exec_RGB_LED_GetStateReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_RGB_LED_GetColor(ctx context.Context, in *RI_SDK_Exec_RGB_LED_GetColorParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_GetColorReturn, error) {
	out := new(RI_SDK_Exec_RGB_LED_GetColorReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_GetColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_RGB_LED_FlashingWithFrequency(ctx context.Context, in *RI_SDK_Exec_RGB_LED_FlashingWithFrequencyParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_FlashingWithFrequencyReturn, error) {
	out := new(RI_SDK_Exec_RGB_LED_FlashingWithFrequencyReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_FlashingWithFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_RGB_LED_FlashingWithPause(ctx context.Context, in *RI_SDK_Exec_RGB_LED_FlashingWithPauseParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_FlashingWithPauseReturn, error) {
	out := new(RI_SDK_Exec_RGB_LED_FlashingWithPauseReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_FlashingWithPause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roboSdkClient) RI_SDK_Exec_RGB_LED_Flicker(ctx context.Context, in *RI_SDK_Exec_RGB_LED_FlickerParams, opts ...grpc.CallOption) (*RI_SDK_Exec_RGB_LED_FlickerReturn, error) {
	out := new(RI_SDK_Exec_RGB_LED_FlickerReturn)
	err := c.cc.Invoke(ctx, "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_Flicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoboSdkServer is the server API for RoboSdk service.
// All implementations must embed UnimplementedRoboSdkServer
// for forward compatibility
type RoboSdkServer interface {
	RI_SDK_InitSDK(context.Context, *RI_SDK_InitSDKParams) (*RI_SDK_InitSDKReturn, error)
	RI_SDK_CreateBasic(context.Context, *RI_SDK_CreateBasicParams) (*RI_SDK_CreateBasicReturn, error)
	RI_SDK_DestroyComponent(context.Context, *RI_SDK_DestroyComponentParams) (*RI_SDK_DestroyComponentReturn, error)
	RI_SDK_DestroySDK(context.Context, *RI_SDK_DestroySDKParams) (*RI_SDK_DestroySDKReturn, error)
	RI_SDK_CreateGroupComponent(context.Context, *RI_SDK_CreateGroupComponentParams) (*RI_SDK_CreateGroupComponentReturn, error)
	RI_SDK_CreateDeviceComponent(context.Context, *RI_SDK_CreateDeviceComponentParams) (*RI_SDK_CreateDeviceComponentReturn, error)
	RI_SDK_CreateModelComponent(context.Context, *RI_SDK_CreateModelComponentParams) (*RI_SDK_CreateModelComponentReturn, error)
	RI_SDK_LinkPWMToController(context.Context, *RI_SDK_LinkPWMToControllerParams) (*RI_SDK_LinkPWMToControllerReturn, error)
	RI_SDK_LinkServodriveToController(context.Context, *RI_SDK_LinkServodriveToControllerParams) (*RI_SDK_LinkServodriveToControllerReturn, error)
	RI_SDK_LinkLedToController(context.Context, *RI_SDK_LinkLedToControllerParams) (*RI_SDK_LinkLedToControllerReturn, error)
	RI_SDK_Executor_Extend(context.Context, *RI_SDK_Executor_ExtendParams) (*RI_SDK_Executor_ExtendReturn, error)
	RI_SDK_Executor_State(context.Context, *RI_SDK_Executor_StateParams) (*RI_SDK_Executor_StateReturn, error)
	RI_SDK_Connector_Extend(context.Context, *RI_SDK_Connector_ExtendParams) (*RI_SDK_Connector_ExtendReturn, error)
	RI_SDK_Connector_I2C_Open(context.Context, *RI_SDK_Connector_I2C_OpenParams) (*RI_SDK_Connector_I2C_OpenReturn, error)
	RI_SDK_Connector_I2C_Extend(context.Context, *RI_SDK_Connector_I2C_ExtendParams) (*RI_SDK_Connector_I2C_ExtendReturn, error)
	RI_SDK_Connector_I2C_State(context.Context, *RI_SDK_Connector_I2C_StateParams) (*RI_SDK_Connector_I2C_StateReturn, error)
	RI_SDK_Connector_I2C_CloseAll(context.Context, *RI_SDK_Connector_I2C_CloseAllParams) (*RI_SDK_Connector_I2C_CloseAllReturn, error)
	RI_SDK_Connector_I2C_Close(context.Context, *RI_SDK_Connector_I2C_CloseParams) (*RI_SDK_Connector_I2C_CloseReturn, error)
	RI_SDK_Connector_I2C_WriteBytes(context.Context, *RI_SDK_Connector_I2C_WriteBytesParams) (*RI_SDK_Connector_I2C_WriteBytesReturn, error)
	RI_SDK_Connector_I2C_ReadBytes(context.Context, *RI_SDK_Connector_I2C_ReadBytesParams) (*RI_SDK_Connector_I2C_ReadBytesReturn, error)
	RI_SDK_Connector_I2C_WriteByte(context.Context, *RI_SDK_Connector_I2C_WriteByteParams) (*RI_SDK_Connector_I2C_WriteByteReturn, error)
	RI_SDK_Connector_I2C_ReadByte(context.Context, *RI_SDK_Connector_I2C_ReadByteParams) (*RI_SDK_Connector_I2C_ReadByteReturn, error)
	RI_SDK_Sigmod_PWM_GetResolution(context.Context, *RI_SDK_Sigmod_PWM_GetResolutionParams) (*RI_SDK_Sigmod_PWM_GetResolutioneReturn, error)
	RI_SDK_Sigmod_PWM_GetFreq(context.Context, *RI_SDK_Sigmod_PWM_GetFreqParams) (*RI_SDK_Sigmod_PWM_GetFreqReturn, error)
	RI_SDK_Sigmod_PWM_SetFreq(context.Context, *RI_SDK_Sigmod_PWM_SetFreqParams) (*RI_SDK_Sigmod_PWM_SetFreqReturn, error)
	RI_SDK_Sigmod_PWM_WriteRegBytes(context.Context, *RI_SDK_Sigmod_PWM_WriteRegBytesParams) (*RI_SDK_Sigmod_PWM_WriteRegBytesReturn, error)
	RI_SDK_Sigmod_PWM_ReadRegBytes(context.Context, *RI_SDK_Sigmod_PWM_ReadRegBytesParams) (*RI_SDK_Sigmod_PWM_ReadRegBytesReturn, error)
	RI_SDK_Sigmod_PWM_WriteByte(context.Context, *RI_SDK_Sigmod_PWM_WriteRegByteParams) (*RI_SDK_Sigmod_PWM_WriteRegByteReturn, error)
	RI_SDK_Sigmod_PWM_ReadByte(context.Context, *RI_SDK_Sigmod_PWM_ReadRegByteParams) (*RI_SDK_Sigmod_PWM_ReadRegByteReturn, error)
	RI_SDK_Sigmod_PWM_Extend(context.Context, *RI_SDK_Sigmod_PWM_ExtendParams) (*RI_SDK_Sigmod_PWM_ExtendReturn, error)
	RI_SDK_Sigmod_PWM_GetPortFreq(context.Context, *RI_SDK_Sigmod_PWM_GetPortFreqParams) (*RI_SDK_Sigmod_PWM_GetPortFreqReturn, error)
	RI_SDK_Sigmod_PWM_SetPortFreq(context.Context, *RI_SDK_Sigmod_PWM_SetPortFreqParams) (*RI_SDK_Sigmod_PWM_SetPortFreqReturn, error)
	RI_SDK_Sigmod_PWM_ResetAll(context.Context, *RI_SDK_Sigmod_PWM_ResetAllParams) (*RI_SDK_Sigmod_PWM_ResetAllReturn, error)
	RI_SDK_Sigmod_PWM_ResetPort(context.Context, *RI_SDK_Sigmod_PWM_ResetPortParams) (*RI_SDK_Sigmod_PWM_ResetPortReturn, error)
	RI_SDK_Sigmod_PWM_SetPortDutyCycle(context.Context, *RI_SDK_Sigmod_PWM_SetPortDutyCycleParams) (*RI_SDK_Sigmod_PWM_SetPortDutyCycleReturn, error)
	RI_SDK_Sigmod_PWM_GetPortDutyCycle(context.Context, *RI_SDK_Sigmod_PWM_GetPortDutyCycleParams) (*RI_SDK_Sigmod_PWM_GetPortDutyCycleReturn, error)
	RI_SDK_Sigmod_PWM_Close(context.Context, *RI_SDK_Sigmod_PWM_CloseParams) (*RI_SDK_Sigmod_PWM_CloseReturn, error)
	RI_SDK_Exec_ServoDrive_Extend(context.Context, *RI_SDK_Exec_ServoDrive_ExtendParams) (*RI_SDK_Exec_ServoDrive_ExtendReturn, error)
	RI_SDK_Exec_ServoDrive_CustomDeviceInit(context.Context, *RI_SDK_Exec_ServoDrive_CustomDeviceInitParams) (*RI_SDK_Exec_ServoDrive_CustomDeviceInitReturn, error)
	RI_SDK_Exec_ServoDrive_TurnByDutyCycle(context.Context, *RI_SDK_Exec_ServoDrive_TurnByDutyCycleParams) (*RI_SDK_Exec_ServoDrive_TurnByDutyCycleReturn, error)
	RI_SDK_Exec_ServoDrive_TurnByPulse(context.Context, *RI_SDK_Exec_ServoDrive_TurnByPulseParams) (*RI_SDK_Exec_ServoDrive_TurnByPulseReturn, error)
	RI_SDK_Exec_ServoDrive_GetCurrentAngle(context.Context, *RI_SDK_Exec_ServoDrive_GetCurrentAngleParams) (*RI_SDK_Exec_ServoDrive_GetCurrentAngleReturn, error)
	RI_SDK_Exec_ServoDrive_GetState(context.Context, *RI_SDK_Exec_ServoDrive_GetStateParams) (*RI_SDK_Exec_ServoDrive_GetStateReturn, error)
	RI_SDK_Exec_ServoDrive_MinStepRotate(context.Context, *RI_SDK_Exec_ServoDrive_MinStepRotateParams) (*RI_SDK_Exec_ServoDrive_MinStepRotateReturn, error)
	RI_SDK_Exec_ServoDrive_Turn(context.Context, *RI_SDK_Exec_ServoDrive_TurnParams) (*RI_SDK_Exec_ServoDrive_TurnReturn, error)
	RI_SDK_Exec_ServoDrive_Stop(context.Context, *RI_SDK_Exec_ServoDrive_StopParams) (*RI_SDK_Exec_ServoDrive_StopReturn, error)
	RI_SDK_Exec_ServoDrive_Rotate(context.Context, *RI_SDK_Exec_ServoDrive_RotateParams) (*RI_SDK_Exec_ServoDrive_RotateReturn, error)
	RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed(context.Context, *RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedParams) (*RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedReturn, error)
	RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed(context.Context, *RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedParams) (*RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedReturn, error)
	RI_SDK_Exec_RGB_LED_Extend(context.Context, *RI_SDK_Exec_RGB_LED_ExtendParams) (*RI_SDK_Exec_RGB_LED_ExtendReturn, error)
	RI_SDK_Exec_RGB_LED_SinglePulse(context.Context, *RI_SDK_Exec_RGB_LED_SinglePulseParams) (*RI_SDK_Exec_RGB_LED_SinglePulseReturn, error)
	RI_SDK_Exec_RGB_LED_Stop(context.Context, *RI_SDK_Exec_RGB_LED_StopParams) (*RI_SDK_Exec_RGB_LED_StopReturn, error)
	RI_SDK_Exec_RGB_LED_GetState(context.Context, *RI_SDK_Exec_RGB_LED_GetStateParams) (*RI_SDK_Exec_RGB_LED_GetStateReturn, error)
	RI_SDK_Exec_RGB_LED_GetColor(context.Context, *RI_SDK_Exec_RGB_LED_GetColorParams) (*RI_SDK_Exec_RGB_LED_GetColorReturn, error)
	RI_SDK_Exec_RGB_LED_FlashingWithFrequency(context.Context, *RI_SDK_Exec_RGB_LED_FlashingWithFrequencyParams) (*RI_SDK_Exec_RGB_LED_FlashingWithFrequencyReturn, error)
	RI_SDK_Exec_RGB_LED_FlashingWithPause(context.Context, *RI_SDK_Exec_RGB_LED_FlashingWithPauseParams) (*RI_SDK_Exec_RGB_LED_FlashingWithPauseReturn, error)
	RI_SDK_Exec_RGB_LED_Flicker(context.Context, *RI_SDK_Exec_RGB_LED_FlickerParams) (*RI_SDK_Exec_RGB_LED_FlickerReturn, error)
	mustEmbedUnimplementedRoboSdkServer()
}

// UnimplementedRoboSdkServer must be embedded to have forward compatible implementations.
type UnimplementedRoboSdkServer struct {
}

func (UnimplementedRoboSdkServer) RI_SDK_InitSDK(context.Context, *RI_SDK_InitSDKParams) (*RI_SDK_InitSDKReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_InitSDK not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_CreateBasic(context.Context, *RI_SDK_CreateBasicParams) (*RI_SDK_CreateBasicReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_CreateBasic not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_DestroyComponent(context.Context, *RI_SDK_DestroyComponentParams) (*RI_SDK_DestroyComponentReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_DestroyComponent not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_DestroySDK(context.Context, *RI_SDK_DestroySDKParams) (*RI_SDK_DestroySDKReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_DestroySDK not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_CreateGroupComponent(context.Context, *RI_SDK_CreateGroupComponentParams) (*RI_SDK_CreateGroupComponentReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_CreateGroupComponent not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_CreateDeviceComponent(context.Context, *RI_SDK_CreateDeviceComponentParams) (*RI_SDK_CreateDeviceComponentReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_CreateDeviceComponent not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_CreateModelComponent(context.Context, *RI_SDK_CreateModelComponentParams) (*RI_SDK_CreateModelComponentReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_CreateModelComponent not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_LinkPWMToController(context.Context, *RI_SDK_LinkPWMToControllerParams) (*RI_SDK_LinkPWMToControllerReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_LinkPWMToController not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_LinkServodriveToController(context.Context, *RI_SDK_LinkServodriveToControllerParams) (*RI_SDK_LinkServodriveToControllerReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_LinkServodriveToController not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_LinkLedToController(context.Context, *RI_SDK_LinkLedToControllerParams) (*RI_SDK_LinkLedToControllerReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_LinkLedToController not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Executor_Extend(context.Context, *RI_SDK_Executor_ExtendParams) (*RI_SDK_Executor_ExtendReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Executor_Extend not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Executor_State(context.Context, *RI_SDK_Executor_StateParams) (*RI_SDK_Executor_StateReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Executor_State not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_Extend(context.Context, *RI_SDK_Connector_ExtendParams) (*RI_SDK_Connector_ExtendReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_Extend not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_Open(context.Context, *RI_SDK_Connector_I2C_OpenParams) (*RI_SDK_Connector_I2C_OpenReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_Open not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_Extend(context.Context, *RI_SDK_Connector_I2C_ExtendParams) (*RI_SDK_Connector_I2C_ExtendReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_Extend not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_State(context.Context, *RI_SDK_Connector_I2C_StateParams) (*RI_SDK_Connector_I2C_StateReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_State not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_CloseAll(context.Context, *RI_SDK_Connector_I2C_CloseAllParams) (*RI_SDK_Connector_I2C_CloseAllReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_CloseAll not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_Close(context.Context, *RI_SDK_Connector_I2C_CloseParams) (*RI_SDK_Connector_I2C_CloseReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_Close not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_WriteBytes(context.Context, *RI_SDK_Connector_I2C_WriteBytesParams) (*RI_SDK_Connector_I2C_WriteBytesReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_WriteBytes not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_ReadBytes(context.Context, *RI_SDK_Connector_I2C_ReadBytesParams) (*RI_SDK_Connector_I2C_ReadBytesReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_ReadBytes not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_WriteByte(context.Context, *RI_SDK_Connector_I2C_WriteByteParams) (*RI_SDK_Connector_I2C_WriteByteReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_WriteByte not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Connector_I2C_ReadByte(context.Context, *RI_SDK_Connector_I2C_ReadByteParams) (*RI_SDK_Connector_I2C_ReadByteReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Connector_I2C_ReadByte not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_GetResolution(context.Context, *RI_SDK_Sigmod_PWM_GetResolutionParams) (*RI_SDK_Sigmod_PWM_GetResolutioneReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_GetResolution not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_GetFreq(context.Context, *RI_SDK_Sigmod_PWM_GetFreqParams) (*RI_SDK_Sigmod_PWM_GetFreqReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_GetFreq not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_SetFreq(context.Context, *RI_SDK_Sigmod_PWM_SetFreqParams) (*RI_SDK_Sigmod_PWM_SetFreqReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_SetFreq not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_WriteRegBytes(context.Context, *RI_SDK_Sigmod_PWM_WriteRegBytesParams) (*RI_SDK_Sigmod_PWM_WriteRegBytesReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_WriteRegBytes not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_ReadRegBytes(context.Context, *RI_SDK_Sigmod_PWM_ReadRegBytesParams) (*RI_SDK_Sigmod_PWM_ReadRegBytesReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_ReadRegBytes not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_WriteByte(context.Context, *RI_SDK_Sigmod_PWM_WriteRegByteParams) (*RI_SDK_Sigmod_PWM_WriteRegByteReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_WriteByte not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_ReadByte(context.Context, *RI_SDK_Sigmod_PWM_ReadRegByteParams) (*RI_SDK_Sigmod_PWM_ReadRegByteReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_ReadByte not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_Extend(context.Context, *RI_SDK_Sigmod_PWM_ExtendParams) (*RI_SDK_Sigmod_PWM_ExtendReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_Extend not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_GetPortFreq(context.Context, *RI_SDK_Sigmod_PWM_GetPortFreqParams) (*RI_SDK_Sigmod_PWM_GetPortFreqReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_GetPortFreq not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_SetPortFreq(context.Context, *RI_SDK_Sigmod_PWM_SetPortFreqParams) (*RI_SDK_Sigmod_PWM_SetPortFreqReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_SetPortFreq not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_ResetAll(context.Context, *RI_SDK_Sigmod_PWM_ResetAllParams) (*RI_SDK_Sigmod_PWM_ResetAllReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_ResetAll not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_ResetPort(context.Context, *RI_SDK_Sigmod_PWM_ResetPortParams) (*RI_SDK_Sigmod_PWM_ResetPortReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_ResetPort not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_SetPortDutyCycle(context.Context, *RI_SDK_Sigmod_PWM_SetPortDutyCycleParams) (*RI_SDK_Sigmod_PWM_SetPortDutyCycleReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_SetPortDutyCycle not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_GetPortDutyCycle(context.Context, *RI_SDK_Sigmod_PWM_GetPortDutyCycleParams) (*RI_SDK_Sigmod_PWM_GetPortDutyCycleReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_GetPortDutyCycle not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Sigmod_PWM_Close(context.Context, *RI_SDK_Sigmod_PWM_CloseParams) (*RI_SDK_Sigmod_PWM_CloseReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Sigmod_PWM_Close not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_Extend(context.Context, *RI_SDK_Exec_ServoDrive_ExtendParams) (*RI_SDK_Exec_ServoDrive_ExtendReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_Extend not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_CustomDeviceInit(context.Context, *RI_SDK_Exec_ServoDrive_CustomDeviceInitParams) (*RI_SDK_Exec_ServoDrive_CustomDeviceInitReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_CustomDeviceInit not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_TurnByDutyCycle(context.Context, *RI_SDK_Exec_ServoDrive_TurnByDutyCycleParams) (*RI_SDK_Exec_ServoDrive_TurnByDutyCycleReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_TurnByDutyCycle not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_TurnByPulse(context.Context, *RI_SDK_Exec_ServoDrive_TurnByPulseParams) (*RI_SDK_Exec_ServoDrive_TurnByPulseReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_TurnByPulse not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_GetCurrentAngle(context.Context, *RI_SDK_Exec_ServoDrive_GetCurrentAngleParams) (*RI_SDK_Exec_ServoDrive_GetCurrentAngleReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_GetCurrentAngle not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_GetState(context.Context, *RI_SDK_Exec_ServoDrive_GetStateParams) (*RI_SDK_Exec_ServoDrive_GetStateReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_GetState not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_MinStepRotate(context.Context, *RI_SDK_Exec_ServoDrive_MinStepRotateParams) (*RI_SDK_Exec_ServoDrive_MinStepRotateReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_MinStepRotate not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_Turn(context.Context, *RI_SDK_Exec_ServoDrive_TurnParams) (*RI_SDK_Exec_ServoDrive_TurnReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_Turn not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_Stop(context.Context, *RI_SDK_Exec_ServoDrive_StopParams) (*RI_SDK_Exec_ServoDrive_StopReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_Stop not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_Rotate(context.Context, *RI_SDK_Exec_ServoDrive_RotateParams) (*RI_SDK_Exec_ServoDrive_RotateReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_Rotate not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed(context.Context, *RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedParams) (*RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed(context.Context, *RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedParams) (*RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_RGB_LED_Extend(context.Context, *RI_SDK_Exec_RGB_LED_ExtendParams) (*RI_SDK_Exec_RGB_LED_ExtendReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_RGB_LED_Extend not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_RGB_LED_SinglePulse(context.Context, *RI_SDK_Exec_RGB_LED_SinglePulseParams) (*RI_SDK_Exec_RGB_LED_SinglePulseReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_RGB_LED_SinglePulse not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_RGB_LED_Stop(context.Context, *RI_SDK_Exec_RGB_LED_StopParams) (*RI_SDK_Exec_RGB_LED_StopReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_RGB_LED_Stop not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_RGB_LED_GetState(context.Context, *RI_SDK_Exec_RGB_LED_GetStateParams) (*RI_SDK_Exec_RGB_LED_GetStateReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_RGB_LED_GetState not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_RGB_LED_GetColor(context.Context, *RI_SDK_Exec_RGB_LED_GetColorParams) (*RI_SDK_Exec_RGB_LED_GetColorReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_RGB_LED_GetColor not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_RGB_LED_FlashingWithFrequency(context.Context, *RI_SDK_Exec_RGB_LED_FlashingWithFrequencyParams) (*RI_SDK_Exec_RGB_LED_FlashingWithFrequencyReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_RGB_LED_FlashingWithFrequency not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_RGB_LED_FlashingWithPause(context.Context, *RI_SDK_Exec_RGB_LED_FlashingWithPauseParams) (*RI_SDK_Exec_RGB_LED_FlashingWithPauseReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_RGB_LED_FlashingWithPause not implemented")
}
func (UnimplementedRoboSdkServer) RI_SDK_Exec_RGB_LED_Flicker(context.Context, *RI_SDK_Exec_RGB_LED_FlickerParams) (*RI_SDK_Exec_RGB_LED_FlickerReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RI_SDK_Exec_RGB_LED_Flicker not implemented")
}
func (UnimplementedRoboSdkServer) mustEmbedUnimplementedRoboSdkServer() {}

// UnsafeRoboSdkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoboSdkServer will
// result in compilation errors.
type UnsafeRoboSdkServer interface {
	mustEmbedUnimplementedRoboSdkServer()
}

func RegisterRoboSdkServer(s grpc.ServiceRegistrar, srv RoboSdkServer) {
	s.RegisterService(&RoboSdk_ServiceDesc, srv)
}

func _RoboSdk_RI_SDK_InitSDK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_InitSDKParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_InitSDK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_InitSDK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_InitSDK(ctx, req.(*RI_SDK_InitSDKParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_CreateBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_CreateBasicParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_CreateBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_CreateBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_CreateBasic(ctx, req.(*RI_SDK_CreateBasicParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_DestroyComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_DestroyComponentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_DestroyComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_DestroyComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_DestroyComponent(ctx, req.(*RI_SDK_DestroyComponentParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_DestroySDK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_DestroySDKParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_DestroySDK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_DestroySDK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_DestroySDK(ctx, req.(*RI_SDK_DestroySDKParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_CreateGroupComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_CreateGroupComponentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_CreateGroupComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_CreateGroupComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_CreateGroupComponent(ctx, req.(*RI_SDK_CreateGroupComponentParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_CreateDeviceComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_CreateDeviceComponentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_CreateDeviceComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_CreateDeviceComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_CreateDeviceComponent(ctx, req.(*RI_SDK_CreateDeviceComponentParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_CreateModelComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_CreateModelComponentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_CreateModelComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_CreateModelComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_CreateModelComponent(ctx, req.(*RI_SDK_CreateModelComponentParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_LinkPWMToController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_LinkPWMToControllerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_LinkPWMToController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_LinkPWMToController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_LinkPWMToController(ctx, req.(*RI_SDK_LinkPWMToControllerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_LinkServodriveToController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_LinkServodriveToControllerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_LinkServodriveToController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_LinkServodriveToController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_LinkServodriveToController(ctx, req.(*RI_SDK_LinkServodriveToControllerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_LinkLedToController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_LinkLedToControllerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_LinkLedToController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_LinkLedToController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_LinkLedToController(ctx, req.(*RI_SDK_LinkLedToControllerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Executor_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Executor_ExtendParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Executor_Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Executor_Extend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Executor_Extend(ctx, req.(*RI_SDK_Executor_ExtendParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Executor_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Executor_StateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Executor_State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Executor_State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Executor_State(ctx, req.(*RI_SDK_Executor_StateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_ExtendParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_Extend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_Extend(ctx, req.(*RI_SDK_Connector_ExtendParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_OpenParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_Open(ctx, req.(*RI_SDK_Connector_I2C_OpenParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_ExtendParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_Extend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_Extend(ctx, req.(*RI_SDK_Connector_I2C_ExtendParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_StateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_State(ctx, req.(*RI_SDK_Connector_I2C_StateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_CloseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_CloseAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_CloseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_CloseAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_CloseAll(ctx, req.(*RI_SDK_Connector_I2C_CloseAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_CloseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_Close(ctx, req.(*RI_SDK_Connector_I2C_CloseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_WriteBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_WriteBytesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_WriteBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_WriteBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_WriteBytes(ctx, req.(*RI_SDK_Connector_I2C_WriteBytesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_ReadBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_ReadBytesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_ReadBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_ReadBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_ReadBytes(ctx, req.(*RI_SDK_Connector_I2C_ReadBytesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_WriteByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_WriteByteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_WriteByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_WriteByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_WriteByte(ctx, req.(*RI_SDK_Connector_I2C_WriteByteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Connector_I2C_ReadByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Connector_I2C_ReadByteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_ReadByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Connector_I2C_ReadByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Connector_I2C_ReadByte(ctx, req.(*RI_SDK_Connector_I2C_ReadByteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_GetResolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_GetResolutionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_GetResolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_GetResolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_GetResolution(ctx, req.(*RI_SDK_Sigmod_PWM_GetResolutionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_GetFreq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_GetFreqParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_GetFreq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_GetFreq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_GetFreq(ctx, req.(*RI_SDK_Sigmod_PWM_GetFreqParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_SetFreq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_SetFreqParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_SetFreq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_SetFreq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_SetFreq(ctx, req.(*RI_SDK_Sigmod_PWM_SetFreqParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_WriteRegBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_WriteRegBytesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_WriteRegBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_WriteRegBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_WriteRegBytes(ctx, req.(*RI_SDK_Sigmod_PWM_WriteRegBytesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_ReadRegBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_ReadRegBytesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_ReadRegBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_ReadRegBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_ReadRegBytes(ctx, req.(*RI_SDK_Sigmod_PWM_ReadRegBytesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_WriteByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_WriteRegByteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_WriteByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_WriteByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_WriteByte(ctx, req.(*RI_SDK_Sigmod_PWM_WriteRegByteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_ReadByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_ReadRegByteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_ReadByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_ReadByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_ReadByte(ctx, req.(*RI_SDK_Sigmod_PWM_ReadRegByteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_ExtendParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_Extend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_Extend(ctx, req.(*RI_SDK_Sigmod_PWM_ExtendParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_GetPortFreq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_GetPortFreqParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_GetPortFreq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_GetPortFreq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_GetPortFreq(ctx, req.(*RI_SDK_Sigmod_PWM_GetPortFreqParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_SetPortFreq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_SetPortFreqParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_SetPortFreq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_SetPortFreq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_SetPortFreq(ctx, req.(*RI_SDK_Sigmod_PWM_SetPortFreqParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_ResetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_ResetAllParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_ResetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_ResetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_ResetAll(ctx, req.(*RI_SDK_Sigmod_PWM_ResetAllParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_ResetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_ResetPortParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_ResetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_ResetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_ResetPort(ctx, req.(*RI_SDK_Sigmod_PWM_ResetPortParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_SetPortDutyCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_SetPortDutyCycleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_SetPortDutyCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_SetPortDutyCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_SetPortDutyCycle(ctx, req.(*RI_SDK_Sigmod_PWM_SetPortDutyCycleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_GetPortDutyCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_GetPortDutyCycleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_GetPortDutyCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_GetPortDutyCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_GetPortDutyCycle(ctx, req.(*RI_SDK_Sigmod_PWM_GetPortDutyCycleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Sigmod_PWM_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Sigmod_PWM_CloseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Sigmod_PWM_Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Sigmod_PWM_Close(ctx, req.(*RI_SDK_Sigmod_PWM_CloseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_ExtendParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_Extend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_Extend(ctx, req.(*RI_SDK_Exec_ServoDrive_ExtendParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_CustomDeviceInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_CustomDeviceInitParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_CustomDeviceInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_CustomDeviceInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_CustomDeviceInit(ctx, req.(*RI_SDK_Exec_ServoDrive_CustomDeviceInitParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_TurnByDutyCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_TurnByDutyCycleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_TurnByDutyCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_TurnByDutyCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_TurnByDutyCycle(ctx, req.(*RI_SDK_Exec_ServoDrive_TurnByDutyCycleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_TurnByPulse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_TurnByPulseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_TurnByPulse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_TurnByPulse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_TurnByPulse(ctx, req.(*RI_SDK_Exec_ServoDrive_TurnByPulseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_GetCurrentAngle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_GetCurrentAngleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_GetCurrentAngle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_GetCurrentAngle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_GetCurrentAngle(ctx, req.(*RI_SDK_Exec_ServoDrive_GetCurrentAngleParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_GetStateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_GetState(ctx, req.(*RI_SDK_Exec_ServoDrive_GetStateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_MinStepRotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_MinStepRotateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_MinStepRotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_MinStepRotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_MinStepRotate(ctx, req.(*RI_SDK_Exec_ServoDrive_MinStepRotateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_Turn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_TurnParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_Turn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_Turn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_Turn(ctx, req.(*RI_SDK_Exec_ServoDrive_TurnParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_StopParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_Stop(ctx, req.(*RI_SDK_Exec_ServoDrive_StopParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_RotateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_Rotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_Rotate(ctx, req.(*RI_SDK_Exec_ServoDrive_RotateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed(ctx, req.(*RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeedParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed(ctx, req.(*RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeedParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_RGB_LED_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_RGB_LED_ExtendParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_Extend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_Extend(ctx, req.(*RI_SDK_Exec_RGB_LED_ExtendParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_RGB_LED_SinglePulse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_RGB_LED_SinglePulseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_SinglePulse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_SinglePulse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_SinglePulse(ctx, req.(*RI_SDK_Exec_RGB_LED_SinglePulseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_RGB_LED_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_RGB_LED_StopParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_Stop(ctx, req.(*RI_SDK_Exec_RGB_LED_StopParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_RGB_LED_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_RGB_LED_GetStateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_GetState(ctx, req.(*RI_SDK_Exec_RGB_LED_GetStateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_RGB_LED_GetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_RGB_LED_GetColorParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_GetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_GetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_GetColor(ctx, req.(*RI_SDK_Exec_RGB_LED_GetColorParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_RGB_LED_FlashingWithFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_RGB_LED_FlashingWithFrequencyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_FlashingWithFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_FlashingWithFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_FlashingWithFrequency(ctx, req.(*RI_SDK_Exec_RGB_LED_FlashingWithFrequencyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_RGB_LED_FlashingWithPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_RGB_LED_FlashingWithPauseParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_FlashingWithPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_FlashingWithPause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_FlashingWithPause(ctx, req.(*RI_SDK_Exec_RGB_LED_FlashingWithPauseParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoboSdk_RI_SDK_Exec_RGB_LED_Flicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RI_SDK_Exec_RGB_LED_FlickerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_Flicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RoboSdk/RI_SDK_Exec_RGB_LED_Flicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoboSdkServer).RI_SDK_Exec_RGB_LED_Flicker(ctx, req.(*RI_SDK_Exec_RGB_LED_FlickerParams))
	}
	return interceptor(ctx, in, info, handler)
}

// RoboSdk_ServiceDesc is the grpc.ServiceDesc for RoboSdk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoboSdk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoboSdk",
	HandlerType: (*RoboSdkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RI_SDK_InitSDK",
			Handler:    _RoboSdk_RI_SDK_InitSDK_Handler,
		},
		{
			MethodName: "RI_SDK_CreateBasic",
			Handler:    _RoboSdk_RI_SDK_CreateBasic_Handler,
		},
		{
			MethodName: "RI_SDK_DestroyComponent",
			Handler:    _RoboSdk_RI_SDK_DestroyComponent_Handler,
		},
		{
			MethodName: "RI_SDK_DestroySDK",
			Handler:    _RoboSdk_RI_SDK_DestroySDK_Handler,
		},
		{
			MethodName: "RI_SDK_CreateGroupComponent",
			Handler:    _RoboSdk_RI_SDK_CreateGroupComponent_Handler,
		},
		{
			MethodName: "RI_SDK_CreateDeviceComponent",
			Handler:    _RoboSdk_RI_SDK_CreateDeviceComponent_Handler,
		},
		{
			MethodName: "RI_SDK_CreateModelComponent",
			Handler:    _RoboSdk_RI_SDK_CreateModelComponent_Handler,
		},
		{
			MethodName: "RI_SDK_LinkPWMToController",
			Handler:    _RoboSdk_RI_SDK_LinkPWMToController_Handler,
		},
		{
			MethodName: "RI_SDK_LinkServodriveToController",
			Handler:    _RoboSdk_RI_SDK_LinkServodriveToController_Handler,
		},
		{
			MethodName: "RI_SDK_LinkLedToController",
			Handler:    _RoboSdk_RI_SDK_LinkLedToController_Handler,
		},
		{
			MethodName: "RI_SDK_Executor_Extend",
			Handler:    _RoboSdk_RI_SDK_Executor_Extend_Handler,
		},
		{
			MethodName: "RI_SDK_Executor_State",
			Handler:    _RoboSdk_RI_SDK_Executor_State_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_Extend",
			Handler:    _RoboSdk_RI_SDK_Connector_Extend_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_Open",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_Open_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_Extend",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_Extend_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_State",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_State_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_CloseAll",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_CloseAll_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_Close",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_Close_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_WriteBytes",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_WriteBytes_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_ReadBytes",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_ReadBytes_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_WriteByte",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_WriteByte_Handler,
		},
		{
			MethodName: "RI_SDK_Connector_I2C_ReadByte",
			Handler:    _RoboSdk_RI_SDK_Connector_I2C_ReadByte_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_GetResolution",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_GetResolution_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_GetFreq",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_GetFreq_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_SetFreq",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_SetFreq_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_WriteRegBytes",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_WriteRegBytes_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_ReadRegBytes",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_ReadRegBytes_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_WriteByte",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_WriteByte_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_ReadByte",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_ReadByte_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_Extend",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_Extend_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_GetPortFreq",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_GetPortFreq_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_SetPortFreq",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_SetPortFreq_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_ResetAll",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_ResetAll_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_ResetPort",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_ResetPort_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_SetPortDutyCycle",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_SetPortDutyCycle_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_GetPortDutyCycle",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_GetPortDutyCycle_Handler,
		},
		{
			MethodName: "RI_SDK_Sigmod_PWM_Close",
			Handler:    _RoboSdk_RI_SDK_Sigmod_PWM_Close_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_Extend",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_Extend_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_CustomDeviceInit",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_CustomDeviceInit_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_TurnByDutyCycle",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_TurnByDutyCycle_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_TurnByPulse",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_TurnByPulse_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_GetCurrentAngle",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_GetCurrentAngle_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_GetState",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_GetState_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_MinStepRotate",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_MinStepRotate_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_Turn",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_Turn_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_Stop",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_Stop_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_Rotate",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_Rotate_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_RotateWithRelativeSpeed_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed",
			Handler:    _RoboSdk_RI_SDK_Exec_ServoDrive_TurnWithRelativeSpeed_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_RGB_LED_Extend",
			Handler:    _RoboSdk_RI_SDK_Exec_RGB_LED_Extend_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_RGB_LED_SinglePulse",
			Handler:    _RoboSdk_RI_SDK_Exec_RGB_LED_SinglePulse_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_RGB_LED_Stop",
			Handler:    _RoboSdk_RI_SDK_Exec_RGB_LED_Stop_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_RGB_LED_GetState",
			Handler:    _RoboSdk_RI_SDK_Exec_RGB_LED_GetState_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_RGB_LED_GetColor",
			Handler:    _RoboSdk_RI_SDK_Exec_RGB_LED_GetColor_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_RGB_LED_FlashingWithFrequency",
			Handler:    _RoboSdk_RI_SDK_Exec_RGB_LED_FlashingWithFrequency_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_RGB_LED_FlashingWithPause",
			Handler:    _RoboSdk_RI_SDK_Exec_RGB_LED_FlashingWithPause_Handler,
		},
		{
			MethodName: "RI_SDK_Exec_RGB_LED_Flicker",
			Handler:    _RoboSdk_RI_SDK_Exec_RGB_LED_Flicker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RoboSdk.proto",
}
